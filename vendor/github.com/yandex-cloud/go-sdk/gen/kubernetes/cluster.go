// Code generated by sdkgen. DO NOT EDIT.

//nolint
package k8s

import (
	"context"

	"google.golang.org/grpc"

	k8s "github.com/yandex-cloud/go-genproto/yandex/cloud/k8s/v1"
	"github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
)

//revive:disable

// ClusterServiceClient is a k8s.ClusterServiceClient with
// lazy GRPC connection initialization.
type ClusterServiceClient struct {
	getConn func(ctx context.Context) (*grpc.ClientConn, error)
}

var _ k8s.ClusterServiceClient = &ClusterServiceClient{}

// Create implements k8s.ClusterServiceClient
func (c *ClusterServiceClient) Create(ctx context.Context, in *k8s.CreateClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return k8s.NewClusterServiceClient(conn).Create(ctx, in, opts...)
}

// Delete implements k8s.ClusterServiceClient
func (c *ClusterServiceClient) Delete(ctx context.Context, in *k8s.DeleteClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return k8s.NewClusterServiceClient(conn).Delete(ctx, in, opts...)
}

// Get implements k8s.ClusterServiceClient
func (c *ClusterServiceClient) Get(ctx context.Context, in *k8s.GetClusterRequest, opts ...grpc.CallOption) (*k8s.Cluster, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return k8s.NewClusterServiceClient(conn).Get(ctx, in, opts...)
}

// List implements k8s.ClusterServiceClient
func (c *ClusterServiceClient) List(ctx context.Context, in *k8s.ListClustersRequest, opts ...grpc.CallOption) (*k8s.ListClustersResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return k8s.NewClusterServiceClient(conn).List(ctx, in, opts...)
}

// ListNodeGroups implements k8s.ClusterServiceClient
func (c *ClusterServiceClient) ListNodeGroups(ctx context.Context, in *k8s.ListClusterNodeGroupsRequest, opts ...grpc.CallOption) (*k8s.ListClusterNodeGroupsResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return k8s.NewClusterServiceClient(conn).ListNodeGroups(ctx, in, opts...)
}

// ListOperations implements k8s.ClusterServiceClient
func (c *ClusterServiceClient) ListOperations(ctx context.Context, in *k8s.ListClusterOperationsRequest, opts ...grpc.CallOption) (*k8s.ListClusterOperationsResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return k8s.NewClusterServiceClient(conn).ListOperations(ctx, in, opts...)
}

// Update implements k8s.ClusterServiceClient
func (c *ClusterServiceClient) Update(ctx context.Context, in *k8s.UpdateClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return k8s.NewClusterServiceClient(conn).Update(ctx, in, opts...)
}
